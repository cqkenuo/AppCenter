package cn.lt.android.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;

import cn.lt.android.util.LogUtils;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    /***
     * 应用中心V4.0.1第一个版本为1，后面版本更新需要自加一次
     * <p>
     * v4.2.0 = 14
     * v4.3.0 = 15
     * v4.3.0 = 16
     * v4.6.0 = 17
     * v4.7.0 = 18
     * v4.7.1 = 19
     *
     */
    public static final int SCHEMA_VERSION = 19;

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        AppEntityDao.createTable(db, ifNotExists);
        SearchHistoryEntityDao.createTable(db, ifNotExists);
        IgnoreUpgradeAppEntityDao.createTable(db, ifNotExists);
        StatisticsEntityDao.createTable(db, ifNotExists);
        LoginHistoryEntityDao.createTable(db, ifNotExists);
        RetryStatisticsEntityDao.createTable(db, ifNotExists);
        UserEntityDao.createTable(db, ifNotExists);
        WakeTaskEntityDao.createTable(db, ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        AppEntityDao.dropTable(db, ifExists);
        SearchHistoryEntityDao.dropTable(db, ifExists);
        IgnoreUpgradeAppEntityDao.dropTable(db, ifExists);
        StatisticsEntityDao.dropTable(db, ifExists);
        LoginHistoryEntityDao.dropTable(db, ifExists);
        RetryStatisticsEntityDao.dropTable(db, ifExists);
        UserEntityDao.dropTable(db, ifExists);
        WakeTaskEntityDao.dropTable(db, ifExists);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            LogUtils.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            LogUtils.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            if (newVersion > oldVersion) {
                LoginHistoryEntityDao.createTable(db, true);
                RetryStatisticsEntityDao.createTable(db, true);
                UserEntityDao.createTable(db, true);
                WakeTaskEntityDao.createTable(db, true);
                MigrationHelper.migrate(db, AppEntityDao.class, IgnoreUpgradeAppEntityDao.class, SearchHistoryEntityDao.class, StatisticsEntityDao.class, LoginHistoryEntityDao.class, RetryStatisticsEntityDao.class,WakeTaskEntityDao.class);
            }

        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AppEntityDao.class);
        registerDaoClass(SearchHistoryEntityDao.class);
        registerDaoClass(IgnoreUpgradeAppEntityDao.class);
        registerDaoClass(StatisticsEntityDao.class);
        registerDaoClass(LoginHistoryEntityDao.class);
        registerDaoClass(RetryStatisticsEntityDao.class);
        registerDaoClass(UserEntityDao.class);
        registerDaoClass(WakeTaskEntityDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

}
