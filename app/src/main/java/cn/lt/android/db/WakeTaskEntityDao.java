package cn.lt.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.lt.android.db.WakeTaskEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAKE_TASK_ENTITY".
*/
public class WakeTaskEntityDao extends AbstractDao<WakeTaskEntity, Long> {

    public static final String TABLENAME = "WAKE_TASK_ENTITY";

    /**
     * Properties of entity WakeTaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Task_id = new Property(1, Integer.class, "task_id", false, "TASK_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Package_name = new Property(3, String.class, "package_name", false, "PACKAGE_NAME");
        public final static Property User_cycle = new Property(4, Long.class, "user_cycle", false, "USER_CYCLE");
        public final static Property Task_cycle = new Property(5, Long.class, "task_cycle", false, "TASK_CYCLE");
        public final static Property Show_type = new Property(6, Integer.class, "show_type", false, "SHOW_TYPE");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Sub_title = new Property(8, String.class, "sub_title", false, "SUB_TITLE");
        public final static Property Image = new Property(9, String.class, "image", false, "IMAGE");
        public final static Property Action_name = new Property(10, String.class, "action_name", false, "ACTION_NAME");
        public final static Property Class_name = new Property(11, String.class, "class_name", false, "CLASS_NAME");
        public final static Property Deep_link = new Property(12, String.class, "deep_link", false, "DEEP_LINK");
        public final static Property Extra = new Property(13, String.class, "extra", false, "EXTRA");
        public final static Property LastExecuteTime = new Property(14, Long.class, "lastExecuteTime", false, "LAST_EXECUTE_TIME");
        public final static Property ExecuteTimes = new Property(15, Integer.class, "executeTimes", false, "EXECUTE_TIMES");
        public final static Property Show_time = new Property(16, Integer.class, "show_time", false, "SHOW_TIME");
        public final static Property Jump_type = new Property(17, String.class, "jump_type", false, "JUMP_TYPE");
    };


    public WakeTaskEntityDao(DaoConfig config) {
        super(config);
    }
    
    public WakeTaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAKE_TASK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TASK_ID\" INTEGER," + // 1: task_id
                "\"TYPE\" TEXT," + // 2: type
                "\"PACKAGE_NAME\" TEXT," + // 3: package_name
                "\"USER_CYCLE\" INTEGER," + // 4: user_cycle
                "\"TASK_CYCLE\" INTEGER," + // 5: task_cycle
                "\"SHOW_TYPE\" INTEGER," + // 6: show_type
                "\"TITLE\" TEXT," + // 7: title
                "\"SUB_TITLE\" TEXT," + // 8: sub_title
                "\"IMAGE\" TEXT," + // 9: image
                "\"ACTION_NAME\" TEXT," + // 10: action_name
                "\"CLASS_NAME\" TEXT," + // 11: class_name
                "\"DEEP_LINK\" TEXT," + // 12: deep_link
                "\"EXTRA\" TEXT," + // 13: extra
                "\"LAST_EXECUTE_TIME\" INTEGER," + // 14: lastExecuteTime
                "\"EXECUTE_TIMES\" INTEGER," + // 15: executeTimes
                "\"SHOW_TIME\" INTEGER," + // 16: show_time
                "\"JUMP_TYPE\" TEXT);"); // 17: jump_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAKE_TASK_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WakeTaskEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer task_id = entity.getTask_id();
        if (task_id != null) {
            stmt.bindLong(2, task_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String package_name = entity.getPackage_name();
        if (package_name != null) {
            stmt.bindString(4, package_name);
        }
 
        Long user_cycle = entity.getUser_cycle();
        if (user_cycle != null) {
            stmt.bindLong(5, user_cycle);
        }
 
        Long task_cycle = entity.getTask_cycle();
        if (task_cycle != null) {
            stmt.bindLong(6, task_cycle);
        }
 
        Integer show_type = entity.getShow_type();
        if (show_type != null) {
            stmt.bindLong(7, show_type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String sub_title = entity.getSub_title();
        if (sub_title != null) {
            stmt.bindString(9, sub_title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(10, image);
        }
 
        String action_name = entity.getAction_name();
        if (action_name != null) {
            stmt.bindString(11, action_name);
        }
 
        String class_name = entity.getClass_name();
        if (class_name != null) {
            stmt.bindString(12, class_name);
        }
 
        String deep_link = entity.getDeep_link();
        if (deep_link != null) {
            stmt.bindString(13, deep_link);
        }
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(14, extra);
        }
 
        Long lastExecuteTime = entity.getLastExecuteTime();
        if (lastExecuteTime != null) {
            stmt.bindLong(15, lastExecuteTime);
        }
 
        Integer executeTimes = entity.getExecuteTimes();
        if (executeTimes != null) {
            stmt.bindLong(16, executeTimes);
        }
 
        Integer show_time = entity.getShow_time();
        if (show_time != null) {
            stmt.bindLong(17, show_time);
        }
 
        String jump_type = entity.getJump_type();
        if (jump_type != null) {
            stmt.bindString(18, jump_type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WakeTaskEntity readEntity(Cursor cursor, int offset) {
        WakeTaskEntity entity = new WakeTaskEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // task_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // package_name
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // user_cycle
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // task_cycle
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // show_type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sub_title
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // image
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // action_name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // class_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // deep_link
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // extra
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // lastExecuteTime
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // executeTimes
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // show_time
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // jump_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WakeTaskEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTask_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPackage_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_cycle(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTask_cycle(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setShow_type(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSub_title(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAction_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClass_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDeep_link(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExtra(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLastExecuteTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setExecuteTimes(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setShow_time(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setJump_type(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WakeTaskEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WakeTaskEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
